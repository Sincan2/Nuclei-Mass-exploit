import os
import subprocess
import ipaddress
import sys
import hashlib
from colorama import Fore, Style, init

# Inisialisasi colorama untuk mendukung warna di terminal
init(autoreset=True)

# Copyright string yang asli dan hash SHA256-nya
EXPECTED_COPYRIGHT = "Copyright by Sincan2"
EXPECTED_HASH = "20afb7d2202a98e32601a876fd6eb3430a966caf8f1624de6a56fbcfd8d2aa9f"

# Fungsi untuk memvalidasi apakah copyright sesuai atau tidak
def validate_copyright():
    # String copyright yang diharapkan
    copyright_string = "Copyright by Sincan2"

    # Menghasilkan hash SHA256 dari string copyright
    hash_object = hashlib.sha256(copyright_string.encode())
    generated_hash = hash_object.hexdigest()

    # Debugging: Cetak hash yang dihasilkan untuk verifikasi
    print(f"Hash yang dihasilkan dari string copyright: {generated_hash}")
    print(f"Hash yang diharapkan: {EXPECTED_HASH}")

    # Memastikan hash sesuai dengan yang di-hardcode
    if generated_hash != EXPECTED_HASH:
        print(Fore.RED + "Copyright telah dimodifikasi atau dihapus! Script tidak dapat dijalankan." + Style.RESET_ALL)
        sys.exit(1)
    else:
        # Tampilkan copyright jika validasi berhasil
        print(Fore.CYAN + "============================")
        print(Fore.CYAN + "   " + copyright_string)
        print(Fore.CYAN + "============================" + Style.RESET_ALL)

# Fungsi untuk mengecek apakah nuclei sudah terinstall, jika belum maka install
def check_and_install_nuclei():
    try:
        # Mengecek apakah nuclei sudah terinstall dengan menjalankan perintah nuclei --version
        result = subprocess.run(['nuclei', '--version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode != 0:
            print("Nuclei tidak ditemukan. Menginstall Nuclei...")
            subprocess.run(['sudo', 'apt', 'install', '-y', 'nuclei'], check=True)
            print("Nuclei berhasil diinstal.")
        else:
            print("Nuclei sudah terinstall.")
    except Exception as e:
        print(f"Terjadi kesalahan saat memeriksa atau menginstal Nuclei: {e}")

# Fungsi untuk mengupdate template nuclei
def update_nuclei_templates():
    try:
        print("Memperbarui template Nuclei...")
        subprocess.run(['nuclei', '-update-templates'], check=True)
        print("Template Nuclei berhasil diperbarui.")
    except Exception as e:
        print(f"Gagal memperbarui template Nuclei: {e}")

# Fungsi untuk menghasilkan daftar IP dari subnet CIDR
def generate_ip_range_from_cidr(cidr_block):
    try:
        # Menggunakan ip_network untuk menghasilkan daftar host dalam subnet
        network = ipaddress.ip_network(cidr_block, strict=False)
        return [str(ip) for ip in network.hosts()]  # Menghasilkan IP dari host yang tersedia
    except ValueError as e:
        print(f"Error: {e}")
        return []

# Fungsi untuk menjalankan Nuclei pada domain atau IP
def run_nuclei_scan(target, template_path, output_file, verbose=False):
    try:
        # Command untuk menjalankan nuclei sesuai format yang diminta
        command = [
            "nuclei",
            "-u", target,              # Target bisa berupa IP atau domain
            "-t", template_path,       # Path ke template Nuclei
            "-o", output_file          # File output hasil scan
        ]

        # Tambahkan opsi verbose jika diinginkan
        if verbose:
            command.append("-v")

        # Jalankan command menggunakan subprocess
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        # Tampilkan hasil scan di terminal
        print(result.stdout)
        if result.stderr:
            print(f"Error scanning {target}: {result.stderr}")

    except Exception as e:
        print(f"Error running nuclei scan for {target}: {str(e)}")

# Main function
def main():
    # Validasi copyright sebelum melanjutkan
    validate_copyright()

    # Mengecek dan menginstal nuclei jika belum ada
    check_and_install_nuclei()

    # Mengupdate template nuclei
    update_nuclei_templates()

    # Path ke template Nuclei (lokasi template CVEs)
    template_path = "/home/kali/.local/nuclei-templates/cves/"

    # Output file untuk menyimpan hasil
    output_file = "hasilqe3.txt"

    # Menanyakan pilihan ke pengguna (IP/blok atau domain) dengan warna
    print("Pilih metode pemindaian:")
    print(Fore.YELLOW + "1. IP atau blok IP (misalnya 127.0.0.1/20)" + Style.RESET_ALL)
    print(Fore.YELLOW + "2. Domain (misalnya example.com)" + Style.RESET_ALL)

    choice = input("Masukkan pilihan (1 atau 2): ")

    if choice == "1":
        # Pengguna memilih untuk memindai IP atau blok IP
        cidr_block = input("Masukkan IP atau blok IP (misalnya 127.0.0.1/20): ")

        # Menghasilkan daftar IP dari subnet CIDR
        ip_list = generate_ip_range_from_cidr(cidr_block)

        # Memulai proses scanning untuk setiap IP
        if ip_list:
            print(f"Memulai scan untuk {len(ip_list)} IP di blok {cidr_block}")
            for ip in ip_list:
                print(f"\nMemindai IP: {ip}")
                run_nuclei_scan(ip, template_path, output_file, verbose=True)
            print(f"\nScan selesai! Hasil pemindaian disimpan di {output_file}")
        else:
            print("Tidak ada IP yang dihasilkan dari subnet yang dimasukkan.")

    elif choice == "2":
        # Pengguna memilih untuk memindai domain
        domain = input("Masukkan domain (misalnya example.com): ")

        # Menjalankan pemindaian langsung terhadap domain
        print(f"\nMemindai domain: {domain}")
        run_nuclei_scan(domain, template_path, output_file, verbose=True)
        print(f"\nScan selesai! Hasil pemindaian disimpan di {output_file}")

    else:
        print("Pilihan tidak valid. Silakan jalankan kembali script dan pilih 1 atau 2.")

if __name__ == "__main__":
    main()
